/*
 *	Invoke the Oracle procedure and return the raw content of the page
 */

import debugModule from 'debug';
const debug = debugModule('webplsql:procedure');

import oracledb from 'oracledb';
import stream from 'node:stream';
import z from 'zod';

import {streamToBuffer} from './stream.js';
import {uploadFiles} from './fileUpload.js';
import {parse, send} from './page.js';
import {ProcedureError} from './procedureError.js';
import {RequestError} from './requestError.js';
import {Trace} from './trace.js';

/**
 * @typedef {import('express').Request} Request
 * @typedef {import('express').Response} Response
 * @typedef {import('oracledb').Connection} Connection
 * @typedef {import('oracledb').Result<unknown>} Result
 * @typedef {import('./types.js').argObjType} argObjType
 * @typedef {import('./types.js').fileUploadType} fileUploadType
 * @typedef {import('./types.js').environmentType} environmentType
 * @typedef {import('./types.js').middlewareOptions} middlewareOptions
 * @typedef {import('./types.js').BindParameterConfig} BindParameterConfig
 */

const SQL_GET_ARGUMENT = [
	'DECLARE',
	'	schemaName		VARCHAR2(32767);',
	'	part1			VARCHAR2(32767);',
	'	part2			VARCHAR2(32767);',
	'	dblink			VARCHAR2(32767);',
	'	objectType		NUMBER;',
	'	objectID		NUMBER;',
	'BEGIN',
	'	dbms_utility.name_resolve(name=>UPPER(:name), context=>1, schema=>schemaName, part1=>part1, part2=>part2, dblink=>dblink, part1_type=>objectType, object_number=>objectID);',
	'	IF (part1 IS NOT NULL) THEN',
	'		SELECT argument_name, data_type BULK COLLECT INTO :names, :types FROM all_arguments WHERE owner = schemaName AND package_name = part1 AND object_name = part2 AND argument_name IS NOT NULL ORDER BY overload, sequence;',
	'	ELSE',
	'		SELECT argument_name, data_type BULK COLLECT INTO :names, :types FROM all_arguments WHERE owner = schemaName AND package_name IS NULL AND object_name = part2 AND argument_name IS NOT NULL ORDER BY overload, sequence;',
	'	END IF;',
	'END;',
].join('\n');

/**
 * Invoke the Oracle procedure and return the page content
 *
 * @param {Request} req - The req object represents the HTTP request.
 * @param {Response} res - The res object represents the HTTP response that an Express app sends when it gets an HTTP request.
 * @param {argObjType} argObj - - The arguments of the procedure to invoke.
 * @param {environmentType} cgiObj - The cgi of the procedure to invoke.
 * @param {fileUploadType[]} filesToUpload - Array of files to be uploaded
 * @param {middlewareOptions} options - the options for the middleware.
 * @param {Connection} databaseConnection - Database connection.
 * @param {Trace} trace - Tracing object.
 * @returns {Promise<void>} Promise resolving to the page content generated by the executed procedure
 */
export async function invokeProcedure(req, res, argObj, cgiObj, filesToUpload, options, databaseConnection, trace) {
	trace.write('invokeProcedure: ENTER');

	const procedure = req.params.name;

	//
	// 1) UPLOAD FILES
	//

	trace.write(`invokeProcedure: upload "${filesToUpload.length}" files`);
	/* istanbul ignore else */
	if (typeof options.doctable === 'string' && options.doctable.length > 0) {
		await uploadFiles(filesToUpload, options.doctable, databaseConnection);
	}

	//
	// 2) GET SQL STATEMENT AND ARGUMENTS
	//

	const para = await getProcedure(procedure, argObj, options, databaseConnection, trace);

	//
	//	3) EXECUTE PROCEDURE
	//

	const HTBUF_LEN = 63;
	const MAX_IROWS = 100000;

	const cgi = {
		keys: Object.keys(cgiObj),
		values: Object.values(cgiObj),
	};

	const fileBlob = await databaseConnection.createLob(oracledb.BLOB);

	/** @type {BindParameterConfig} */
	const bind = {
		cgicount: {dir: oracledb.BIND_IN, type: oracledb.NUMBER, val: cgi.keys.length},
		cginames: {dir: oracledb.BIND_IN, type: oracledb.STRING, val: cgi.keys},
		cgivalues: {dir: oracledb.BIND_IN, type: oracledb.STRING, val: cgi.values},
		htbuflen: {dir: oracledb.BIND_IN, type: oracledb.NUMBER, val: HTBUF_LEN},
		fileExist: {dir: oracledb.BIND_OUT, type: oracledb.NUMBER},
		fileType: {dir: oracledb.BIND_OUT, type: oracledb.STRING},
		fileSize: {dir: oracledb.BIND_OUT, type: oracledb.NUMBER},
		fileBlob: {dir: oracledb.BIND_INOUT, type: oracledb.BLOB, val: fileBlob},
		lines: {dir: oracledb.BIND_OUT, type: oracledb.STRING, maxSize: HTBUF_LEN * 2, maxArraySize: MAX_IROWS},
		irows: {dir: oracledb.BIND_INOUT, type: oracledb.NUMBER, val: MAX_IROWS},
	};

	// execute procedure and retrieve page
	const sqlStatement = getProcedureSQL(para.sql);
	/** @type {Result | null} */
	let result = null;
	try {
		trace.write(`execute:\n${'-'.repeat(30)}\n${sqlStatement}\n${'-'.repeat(30)}\nwith bindings:\n${Trace.inspect(bind)}`);
		result = await databaseConnection.execute(sqlStatement, Object.assign(bind, para.bind));
		trace.write(`results:\n${Trace.inspect(result)}`);
	} catch (err) {
		/* istanbul ignore next */
		throwError(`Error when executing procedure\n${sqlStatement}\n${err instanceof Error ? err.toString() : ''}`, para, cgiObj, trace);
	}

	//
	//	4) PROCESS RESULTS
	//

	// no results
	if (result === null) {
		/* istanbul ignore next */
		throwError('Error when retrieving rows', para, cgiObj, trace);
	}

	debug('result.outBinds', result.outBinds);

	// validate results
	const data = z
		.object({
			irows: z.number(),
			lines: z.array(z.string()),
			fileExist: z.number(),
			fileType: z.string().nullable(),
			fileSize: z.number().nullable(),
			fileBlob: z.instanceof(stream.Readable).nullable(),
		})
		.parse(result.outBinds);

	// Make sure that we have retrieved all the rows
	if (data.irows > MAX_IROWS) {
		/* istanbul ignore next */
		throwError(`Error when retrieving rows. irows="${data.irows}"`, para, cgiObj, trace);
	}

	// combine page
	const pageContent = data.lines.join('');
	trace.write(`PLAIN CONTENT:\n${'-'.repeat(30)}\n${pageContent}\n${'-'.repeat(30)}`);

	//
	//	6) PARSE PAGE
	//

	// parse what we received from PL/SQL
	const pageComponents = parse(pageContent);

	// add "Server" header
	pageComponents.head.server = cgiObj.SERVER_SOFTWARE;

	// add file download information
	if (data.fileExist === 1) {
		pageComponents.file.fileType = data.fileType;
		pageComponents.file.fileSize = data.fileSize;
		if (data.fileBlob) {
			pageComponents.file.fileBlob = await streamToBuffer(data.fileBlob);
		}
	}

	trace.write(`PARSED CONTENT:\n${'-'.repeat(30)}\n${Trace.inspect(pageComponents)}\n${'-'.repeat(30)}`);

	//
	//	5) SEND THE RESPONSE
	//

	send(req, res, pageComponents, trace);

	//
	//	6) CLEANUP
	//

	fileBlob.destroy();

	trace.write('invokeProcedure: EXIT');

	return Promise.resolve();
}

/**
 * Report error in procedure
 * @param {string} error - The error message
 * @param {{sql: string; bind: BindParameterConfig}} para - The procedure and arguments
 * @param {environmentType} cgiObj - The CGI object
 * @param {Trace} trace - The trace object
 * @returns {never} - Never returns
 */
function throwError(error, para, cgiObj, trace) {
	trace.write(error);
	throw new ProcedureError(error, cgiObj, para.sql, para.bind);
}

/**
 *	Get the procedure and arguments to execute
 *	@param {string} procedure - The procedure to execute
 *	@param {argObjType} argObj - The arguments to pass to the procedure
 *	@param {middlewareOptions} options - The options for the middleware
 *	@param {Connection} databaseConnection - The database connection
 *	@param {Trace} trace - The trace object
 *	@returns {Promise<{sql: string; bind: BindParameterConfig}>} - The SQL statement and bindings for the procedure to execute
 */
async function getProcedure(procedure, argObj, options, databaseConnection, trace) {
	if (options.pathAlias && options.pathAlias.alias === procedure) {
		trace.write(`getProcedure: path alias "${options.pathAlias.alias}" redirects to "${options.pathAlias.procedure}"`);
		return Promise.resolve({
			sql: `${options.pathAlias.procedure}(p_path=>:p_path);`,
			bind: {
				p_path: {dir: oracledb.BIND_IN, type: oracledb.STRING, val: procedure},
			},
		});
	} else if (procedure.startsWith('!')) {
		trace.write('getProcedure: get variable arguments');
		return getVarArgsPara(procedure, argObj);
	}

	trace.write('getProcedure: get named arguments');
	return getFixArgsPara(procedure, argObj, databaseConnection);
}

/**
 * Get the SQL statement to execute when a new procedure is invoked
 * @param {string} procedure - The procedure
 * @returns {string} - The SQL statement to execute
 */
function getProcedureSQL(procedure) {
	return `
DECLARE
	fileType VARCHAR2(32767);
	fileSize INTEGER;
	fileBlob BLOB;
	fileExist INTEGER := 0;
BEGIN
	-- Ensure a stateless environment by resetting package state (dbms_session.reset_package)
	dbms_session.modify_package_state(dbms_session.reinitialize);

	-- initialize the cgi
	owa.init_cgi_env(:cgicount, :cginames, :cgivalues);

	-- initialize the htp package
	htp.init;

	-- set the HTBUF_LEN
	htp.HTBUF_LEN := :htbuflen;

	-- execute the procedure
	BEGIN
		${procedure}
	EXCEPTION WHEN OTHERS THEN
		raise_application_error(-20000, 'Error executing ${procedure}'||CHR(10)||SUBSTR(dbms_utility.format_error_stack()||CHR(10)||dbms_utility.format_error_backtrace(), 1, 2000));
	END;

	-- Check for file download
	IF (wpg_docload.is_file_download()) THEN
		wpg_docload.get_download_file(fileType);
		IF (filetype = 'B') THEN
			fileExist := 1;
			wpg_docload.get_download_blob(:fileBlob);
			fileSize := dbms_lob.getlength(:fileBlob);
			--dbms_lob.copy(dest_lob=>:fileBlob, src_lob=>fileBlob, amount=>fileSize);
		END IF;
	END IF;
	:fileExist := fileExist;
	:fileType := fileType;
	:fileSize := fileSize;

	-- retrieve the page
	owa.get_page(thepage=>:lines, irows=>:irows);
END;
`;
}

/**
 * Get the sql statement and bindings for the procedure to execute for a variable number of arguments
 * @param {string} procedure - The procedure to execute
 * @param {argObjType} argObj - The arguments to pass to the procedure
 * @returns {Promise<{sql: string; bind: BindParameterConfig}>} - The SQL statement and bindings for the procedure to execute
 * @throws {RequestError} - If an error occurs
 */
async function getVarArgsPara(procedure, argObj) {
	const names = [];
	const values = [];

	for (const key in argObj) {
		const value = argObj[key];
		if (typeof value === 'string') {
			names.push(key);
			values.push(value);
		} else if (Array.isArray(value)) {
			value.forEach((item) => {
				names.push(key);
				values.push(item);
			});
		}
	}

	return Promise.resolve({
		sql: `${procedure.substring(1)}(:argnames, :argvalues);`,
		bind: {
			argnames: {dir: oracledb.BIND_IN, type: oracledb.STRING, val: names},
			argvalues: {dir: oracledb.BIND_IN, type: oracledb.STRING, val: values},
		},
	});
}

/**
 * Get the sql statement and bindings for the procedure to execute for a fixed number of arguments
 * @param {string} procedure - The procedure to execute
 * @param {argObjType} argObj - The arguments to pass to the procedure
 * @param {Connection} databaseConnection - The database connection
 * @returns {Promise<{sql: string; bind: BindParameterConfig}>} - The SQL statement and bindings for the procedure to execute
 */
async function getFixArgsPara(procedure, argObj, databaseConnection) {
	/** @type {BindParameterConfig} */
	const bind = {};
	let index = 0;

	const argTypes = await getArguments(procedure, databaseConnection);

	// bindings for the statement
	let sql = `${procedure}(`;
	for (const key in argObj) {
		const value = argObj[key];
		const parameterName = `p_${key}`;

		// prepend the separator, if this is not the first argument
		if (index > 0) {
			sql += ',';
		}
		index++;

		// add the argument
		sql += `${key}=>:${parameterName}`;

		// add the binding
		bind[parameterName] = {dir: oracledb.BIND_IN, type: oracledb.STRING};

		// set the value or array of values
		if (Array.isArray(value) || argTypes[key] === 'PL/SQL TABLE') {
			/** @type {string[]} */
			const val = [];
			if (typeof value === 'string') {
				val.push(value);
			} else {
				value.forEach((element) => {
					val.push(element);
				});
			}
			bind[parameterName].val = val;
		} else if (typeof value === 'string') {
			bind[parameterName].val = value;
		}
	}
	sql += ');';

	return Promise.resolve({
		sql: sql,
		bind: bind,
	});
}

/**
 *	Retrieve the argument types for a given procedure to be executed.
 *	This is important because if the procedure is defined to take a PL/SQL indexed table,
 *	we must provise a table, even if there is only one argument to be submitted.
 *	@param {string} procedure - The procedure
 *	@param {Connection} databaseConnection - The database connection
 *	@returns {Promise<Record<string, string>>} - The argument types
 */
async function getArguments(procedure, databaseConnection) {
	const MAX_PARAMETER_NUMBER = 1000;

	/** @type {BindParameterConfig} */
	const bind = {
		name: {dir: oracledb.BIND_IN, type: oracledb.STRING, val: procedure},
		names: {dir: oracledb.BIND_OUT, type: oracledb.STRING, maxSize: 60, maxArraySize: MAX_PARAMETER_NUMBER},
		types: {dir: oracledb.BIND_OUT, type: oracledb.STRING, maxSize: 60, maxArraySize: MAX_PARAMETER_NUMBER},
	};

	/** @type {Result} */
	let result;
	try {
		result = await databaseConnection.execute(SQL_GET_ARGUMENT, bind);
	} catch (err) {
		/* istanbul ignore next */
		const message = `Error when retrieving arguments\n${SQL_GET_ARGUMENT}\n${err instanceof Error ? err.stack : ''}`;
		/* istanbul ignore next */
		throw new RequestError(message);
	}

	/** @type {{names: string[], types: string[]}} */
	let data;
	try {
		data = z
			.object({
				names: z.array(z.string()),
				types: z.array(z.string()),
			})
			.parse(result.outBinds);
	} catch (err) {
		/* istanbul ignore next */
		const message = `Error when decoding arguments\n${SQL_GET_ARGUMENT}\n${err instanceof Error ? err.stack : ''}`;
		/* istanbul ignore next */
		throw new RequestError(message);
	}

	if (data.names.length !== data.types.length) {
		/* istanbul ignore next */
		throw new RequestError('Error when decoding arguments. The number of names and types does not match');
	}

	/** @type {Record<string, string>} */
	const argTypes = {};
	for (let i = 0; i < data.names.length; i++) {
		argTypes[data.names[i].toLowerCase()] = data.types[i];
	}

	return Promise.resolve(argTypes);
}
